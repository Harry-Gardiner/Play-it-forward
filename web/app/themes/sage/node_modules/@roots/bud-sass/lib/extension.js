import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, dependsOnOptional, expose, label, options, } from '@roots/bud-framework/extension/decorators';
/**
 * Sass support extension for `@roots/bud-sass`
 *
 * @public
 * @decorator `@label`
 * @decorator `@expose`
 * @decorator `@dependsOn`
 * @decorator `@dependsOnOptional`
 */
let BudSass = class BudSass extends Extension {
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     */
    async register(_bud) {
        const implementation = await this.import(`sass`);
        this.setOptions({ implementation, sourceMap: true });
    }
    /**
     * `configAfter` callback
     *
     * @public
     * @decorator `@bind`
     */
    async configAfter(bud) {
        bud.build
            .setLoader(`sass-loader`)
            .setItem(`sass`, {
            ident: `sass`,
            loader: `sass-loader`,
            options: this.options,
        })
            .setRule(`sass`, {
            test: (app) => app.hooks.filter(`pattern.sass`),
            include: [app => app.path(`@src`)],
            use: [`precss`, `css`, `postcss`, `resolveUrl`, `sass`],
        });
        bud.hooks.on(`build.resolve.extensions`, ext => ext.add(`.scss`).add(`.sass`));
        if (bud.postcss) {
            bud.postcss.syntax = `postcss-scss`;
        }
    }
    /**
     * Register global stylsheet
     *
     * @remarks
     * Used to register styles which are included globally
     *
     * @example
     * ```ts
     * bud.sass.registerGlobal(`$primary-color: #ff0000;`)
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    registerGlobal(data) {
        data = Array.isArray(data) ? data : [data];
        return this.setOption(`additionalData`, value => [value ?? null, ...data].filter(Boolean).join(`\n`));
    }
    /**
     * Import a partial globally
     *
     * @remarks
     * Used to import a partial globally (such as a `variables.scss` file)
     *
     * @example
     * ```ts
     * bud.sass.importPartial()
     * ```
     *
     * @public
     * @decorator `@bind`
     */
    importGlobal(data) {
        data = Array.isArray(data) ? data : [data];
        return this.registerGlobal(data.map(item => `@import "${item}";`));
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudSass.prototype, "register", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudSass.prototype, "configAfter", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudSass.prototype, "registerGlobal", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], BudSass.prototype, "importGlobal", null);
BudSass = __decorate([
    label(`@roots/bud-sass`),
    dependsOn([`@roots/bud-sass/resolve-url`]),
    dependsOnOptional([`@roots/bud-postcss`]),
    options({
        implementation: null,
        sourceMap: true,
    }),
    expose(`sass`)
], BudSass);
export { BudSass };
//# sourceMappingURL=extension.js.map