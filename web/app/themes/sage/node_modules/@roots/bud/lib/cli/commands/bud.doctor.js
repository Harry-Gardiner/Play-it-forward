import { __decorate } from "tslib";
import BudCommand from '@roots/bud/cli/commands/bud';
import { Command } from '@roots/bud-support/clipanion';
import Ink from '@roots/bud-support/ink';
import React from '@roots/bud-support/react';
import webpack from '@roots/bud-support/webpack';
import { dry } from '../decorators/command.dry.js';
/**
 * `bud doctor` command
 *
 * @public
 * @decorator `@dry`
 */
let BudDoctorCommand = class BudDoctorCommand extends BudCommand {
    constructor() {
        super(...arguments);
        this.withArguments = async (args) => {
            return { ...args, dry: true };
        };
    }
    /**
     * Execute command
     *
     * @public
     * @decorator `@bind`
     */
    async execute() {
        await this.makeBud(this);
        await this.run(this);
        try {
            this.configuration = await this.bud.build.make();
            await this.renderOnce(React.createElement(Ink.Box, null,
                React.createElement(Ink.Text, { color: "green" }, "\u2705 bud.js generated configuration")));
        }
        catch (error) {
            await this.renderOnce(React.createElement(Ink.Box, null,
                React.createElement(Ink.Text, { color: "red" },
                    "\u274C ",
                    error?.message ?? error)));
        }
        try {
            webpack.validate(this.configuration);
            await this.renderOnce(React.createElement(Ink.Box, null,
                React.createElement(Ink.Text, { color: "green" }, "\u2705 webpack validated configuration")));
        }
        catch (error) {
            await this.renderOnce(React.createElement(Ink.Box, null,
                React.createElement(Ink.Text, { color: "red" },
                    "\u274C ",
                    error?.message ?? error)));
        }
        await this.renderOnce(React.createElement(Ink.Box, { flexDirection: "column" },
            React.createElement(Ink.Text, { color: "blue" }, "Registered configurations"),
            Object.values(this.bud.context.config)
                .filter(({ bud }) => bud)
                .map(({ name, path }, i) => (React.createElement(Ink.Box, { key: i },
                React.createElement(Ink.Text, null,
                    "- ",
                    name),
                React.createElement(Ink.Text, null, ` `),
                React.createElement(Ink.Text, { color: "gray" }, path.replace(this.bud.context.basedir, `.`)))))));
    }
};
BudDoctorCommand.paths = [[`doctor`]];
BudDoctorCommand.usage = Command.Usage({
    description: `Check project for common errors`,
    details: `\
The \`bud doctor\` command will:

1. validate the \`production\` configuration with \`webpack\`

\`webpack\` exports a \`validate\` function which is used by this command to verify that
the configuration matches the \`webpack\` configuration schema.

2. check the \`dependencies\` and \`devDependencies\` in the \`package.json\` file.

In general, \`bud.js\` dependencies should be kept at the same version. This script doesn't account
for a lot of edge cases so it might return a false positive.
`,
    examples: [
        [`Check compiled configuration against webpack`, `$0 doctor`],
    ],
});
BudDoctorCommand = __decorate([
    dry
], BudDoctorCommand);
export default BudDoctorCommand;
//# sourceMappingURL=bud.doctor.js.map